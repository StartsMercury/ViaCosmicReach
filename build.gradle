plugins {
    id "java-library"
    id "net.raphimc.class-token-replacer" version "1.1.3"
}

base {
    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    compileJava.options.encoding = compileTestJava.options.encoding = javadoc.options.encoding = "UTF-8"

    group = project.maven_group ?: rootProject.maven_group
    archivesName = project.maven_name ?: rootProject.maven_name
    version = project.maven_version ?: rootProject.maven_version
}

configurations {
    include

    implementation.extendsFrom include
    api.extendsFrom include
}

repositories {
    mavenCentral()
    maven {
        name = "ViaVersion"
        url = "https://repo.viaversion.com"
    }
    maven {
        name = "Lenni0451"
        url = "https://maven.lenni0451.net/everything"
    }
    maven {
        name = "OpenCollab Releases"
        url = "https://repo.opencollab.dev/maven-releases"
    }
    maven {
        name = "OpenCollab Snapshots"
        url = "https://repo.opencollab.dev/maven-snapshots"
    }
    maven {
        name = "Minecraft Libraries"
        url = "https://libraries.minecraft.net"

        content {
            includeGroup "com.mojang"
        }
    }
    maven {
        name = "Jitpack"
        url = "https://jitpack.io"

        content {
            includeGroup "com.github.FinalForEach"
            includeGroup "com.github.Oryxel"
        }
    }
}

dependencies {
    implementation "net.raphimc:ViaProxy:3.3.4-SNAPSHOT"

    include "com.github.FinalForEach:Cosmic-Reach-Save-Library:b1dd3275f6"
    include "org.json:json:20240303"
}

processResources {
    inputs.property "version", project.version

    filesMatching("viaproxy.yml") {
        expand "version": project.version
    }
}

sourceSets {
    main {
        classTokenReplacer {
            property("\${version}", project.version)
            property("\${impl_version}", "git-${project.name}-${project.version}:${project.latestCommitHash()}")
        }
    }
}

jar {
    dependsOn configurations.include
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.include.collect {
            zipTree(it)
        }
    } {
        exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA"
    }

    from("LICENSE") {
        rename { "${it}_${project.name ?: rootProject.name}" }
    }
}

String latestCommitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "git", "rev-parse", "--short", "HEAD"
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
